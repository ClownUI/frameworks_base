<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (C) 2020-2023 The LineageOS Project
    Copyright (C) 2024 Project Pixelage

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<resources>
    <!-- Build properties from a GMS certified device against current platform SPL level -->
    <string-array name="config_certifiedBuildProperties" translatable="false">
        <item>PRODUCT:tokay_beta</item>
        <item>DEVICE:tokay</item>
        <item>MANUFACTURER:Google</item>
        <item>BRAND:google</item>
        <item>MODEL:Pixel 9</item>
        <item>FINGERPRINT:google/tokay_beta/tokay:15/AP41.240823.009/12329489:user/release-keys</item>
        <item>VERSION.SECURITY_PATCH:2024-09-05</item>
    </string-array>

    <!-- Build fingerprint from stock ROM -->
    <string name="config_stockFingerprint" translatable="false"></string>

    <!-- Paths to the libraries that contain device specific key handlers -->
    <string-array name="config_deviceKeyHandlerLibs" translatable="false">
    </string-array>

    <!-- Names of the key handler classes -->
    <string-array name="config_deviceKeyHandlerClasses" translatable="false">
    </string-array>

    <!-- The list of components which should be automatically disabled for a specific device.
         Note: this MUST not be used to randomly disable components, ask for approval first! -->
    <string-array name="config_deviceDisabledComponents" translatable="false">
    </string-array>

    <!-- The list of components which should be automatically disabled for all devices. -->
    <string-array name="config_globallyDisabledComponents" translatable="false">
    </string-array>

    <!-- The list of components which should be forced to be enabled. -->
    <string-array name="config_forceEnabledComponents" translatable="false">
    </string-array>

    <!-- Whether to cancel fingerprint operation if not idle -->
    <bool name="config_fpCancelIfNotIdle">false</bool>

    <!-- The list of package IDs that are allowed to use aux cameras.
         NOTE: If this list is empty then all apps will be able to use aux cameras. -->
    <string-array name="config_cameraAuxPackageAllowList" translatable="false" />

    <!-- The list of package IDs that are not allowed to use aux cameras. -->
    <string-array name="config_cameraAuxPackageExcludeList" translatable="false" />

    <!-- The list of package IDs that are allowed to skip camera high frame rate checks. -->
    <string-array name="config_cameraHFRPrivAppList" translatable="false" />

    <!-- Whether device has an alert slider. -->
    <bool name="config_hasAlertSlider">false</bool>

    <!-- These are system packages exempted from privacy indicator -->
    <string-array name="config_indicatorExemptedPackageNames" translatable="false">
        <item>com.android.bluetooth</item>
        <item>com.android.cellbroadcastservice</item>
        <item>com.android.mms.service</item>
        <item>com.android.networkstack.tethering</item>
        <item>com.android.ons</item>
        <item>com.android.phone</item>
        <item>com.android.printspooler</item>
        <item>com.android.providers.telephony</item>
        <item>com.android.stk</item>
        <item>com.android.systemui</item>
        <item>com.google.android.settings.intelligence</item>
        <item>com.mediatek.ims</item>
        <item>com.qualcomm.qti.cne</item>
        <item>com.shannon.imsservice</item>
    </string-array>

    <!-- Define device configs on boot -->
    <string-array name="global_device_configs_override" translatable="false">
    </string-array>
    <string-array name="device_configs_override" translatable="false">
    </string-array>

    <!-- Should we listen for fingerprints when the screen is off?  Devices
         with a rear-mounted sensor want this, but certain devices have
         the sensor embedded in the power key and listening all the time
         causes a poor experience. -->
    <bool name="config_fingerprintWakeAndUnlock">true</bool>

    <!-- Default values for status bar DT2S gesture -->
    <bool name="config_dt2sGestureAvailable">true</bool>
    <bool name="config_dt2sGestureEnabledByDefault">true</bool>

    <!-- Whether charging control should be enabled by default -->
    <bool name="config_chargingControlEnabled">false</bool>

    <!-- Default charging control mode.
         This integer should be set to:
         1 - auto - Use the alarm to calculate the time range when to activate charging control
         2 - custom - Use time range when the device is usually charging for hours
         3 - limit - Just limit charging -->
    <integer name="config_defaultChargingControlMode">1</integer>

    <!-- Default time when charging control is activated.
         Represented as seconds from midnight (e.g. 79200 == 10pm). -->
    <integer name="config_defaultChargingControlStartTime">79200</integer>

    <!-- Default time when battery will be fully charged.
         Represented as seconds from midnight (e.g. 21600 == 6am). -->
    <integer name="config_defaultChargingControlTargetTime">21600</integer>

    <!-- Default charging limit. -->
    <integer name="config_defaultChargingControlLimit">80</integer>

    <!-- Considering the fact that the system might have an incorrect estimation of the time to
         full. Set a time margin to make the device fully charged before the target time arrives.
         The unit is minutes and the default value is 30 minutes. If you find that it is not enough
         to make the device to be fully charged at the target time, increase the value
    -->
    <integer name="config_chargingControlTimeMargin">30</integer>

    <!-- For a device that cannot bypass battery when charging stops (that is, the battery current
         is 0mA when charging stops), the battery will gradually discharge. So we need to make it
         recharge when the battery level is lower than a threshold. Set this so that the device
         will be charged between (limit - val) and limit. -->
    <integer name="config_chargingControlBatteryRechargeMargin">10</integer>
</resources>
